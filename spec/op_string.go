// Code generated by "stringer -type=Op"; DO NOT EDIT.

package spec

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Pass-1]
	_ = x[Equal-2]
	_ = x[Craft-3]
	_ = x[Uncraft-4]
	_ = x[TypeOf-5]
	_ = x[SizeOf-6]
	_ = x[MaxSize-7]
	_ = x[Fingerprint-8]
	_ = x[Root-9]
	_ = x[Encode-10]
	_ = x[Decode-11]
	_ = x[ArrayEmpty-16]
	_ = x[ArrayUnit-17]
	_ = x[ProductEmpty-18]
	_ = x[ProductUnit-19]
	_ = x[Concat-20]
	_ = x[MakeSum-21]
	_ = x[Which-22]
	_ = x[Field-23]
	_ = x[Slot-24]
	_ = x[Section-25]
	_ = x[Gather-26]
	_ = x[Slice-27]
	_ = x[Let-32]
	_ = x[Lazy-33]
	_ = x[Lambda-34]
	_ = x[Fractal-35]
	_ = x[Eval-36]
	_ = x[Apply-37]
	_ = x[Mux-38]
	_ = x[Branch-39]
	_ = x[Try-40]
	_ = x[Panic-41]
	_ = x[Self-42]
	_ = x[Post-48]
	_ = x[Load-49]
	_ = x[Input-64]
	_ = x[Output-65]
	_ = x[Interact-66]
	_ = x[ListFrom-80]
	_ = x[ListTo-81]
	_ = x[AnyTypeFrom-82]
	_ = x[AnyTypeTo-83]
	_ = x[AnyTypeElemType-84]
	_ = x[AnyValueFrom-85]
	_ = x[AnyValueTo-86]
	_ = x[AnyValueElemType-87]
	_ = x[Param0-112]
	_ = x[ParamN-127]
	_ = x[ZERO-128]
	_ = x[ONE-129]
	_ = x[LiteralKind-130]
	_ = x[LiteralArrayType-131]
	_ = x[LiteralRefType-132]
	_ = x[LiteralListType-133]
	_ = x[LiteralLazyType-134]
	_ = x[LiteralLambdaType-135]
	_ = x[LiteralPortType-136]
	_ = x[LiteralAnyType-137]
	_ = x[LiteralAnyValue-138]
	_ = x[LiteralB8-192]
	_ = x[LiteralB16-193]
	_ = x[LiteralB32-195]
	_ = x[LiteralB64-199]
	_ = x[LiteralB128-207]
	_ = x[LiteralB256-223]
	_ = x[LiteralB0-224]
	_ = x[LiteralB1_0-226]
	_ = x[LiteralB1_1-227]
	_ = x[LiteralB2_00-228]
	_ = x[LiteralB2_01-229]
	_ = x[LiteralB2_10-230]
	_ = x[LiteralB2_11-231]
	_ = x[LiteralB3_000-232]
	_ = x[LiteralB3_001-233]
	_ = x[LiteralB3_010-234]
	_ = x[LiteralB3_011-235]
	_ = x[LiteralB3_100-236]
	_ = x[LiteralB3_101-237]
	_ = x[LiteralB3_110-238]
	_ = x[LiteralB3_111-239]
	_ = x[LiteralB4_0000-240]
	_ = x[LiteralB4_0001-241]
	_ = x[LiteralB4_0010-242]
	_ = x[LiteralB4_0011-243]
	_ = x[LiteralB4_0100-244]
	_ = x[LiteralB4_0101-245]
	_ = x[LiteralB4_0110-246]
	_ = x[LiteralB4_0111-247]
	_ = x[LiteralB4_1000-248]
	_ = x[LiteralB4_1001-249]
	_ = x[LiteralB4_1010-250]
	_ = x[LiteralB4_1011-251]
	_ = x[LiteralB4_1100-252]
	_ = x[LiteralB4_1101-253]
	_ = x[LiteralB4_1110-254]
	_ = x[LiteralB4_1111-255]
}

const _Op_name = "UnknownPassEqualCraftUncraftTypeOfSizeOfMaxSizeFingerprintRootEncodeDecodeArrayEmptyArrayUnitProductEmptyProductUnitConcatMakeSumWhichFieldSlotSectionGatherSliceLetLazyLambdaFractalEvalApplyMuxBranchTryPanicSelfPostLoadInputOutputInteractListFromListToAnyTypeFromAnyTypeToAnyTypeElemTypeAnyValueFromAnyValueToAnyValueElemTypeParam0ParamNZEROONELiteralKindLiteralArrayTypeLiteralRefTypeLiteralListTypeLiteralLazyTypeLiteralLambdaTypeLiteralPortTypeLiteralAnyTypeLiteralAnyValueLiteralB8LiteralB16LiteralB32LiteralB64LiteralB128LiteralB256LiteralB0LiteralB1_0LiteralB1_1LiteralB2_00LiteralB2_01LiteralB2_10LiteralB2_11LiteralB3_000LiteralB3_001LiteralB3_010LiteralB3_011LiteralB3_100LiteralB3_101LiteralB3_110LiteralB3_111LiteralB4_0000LiteralB4_0001LiteralB4_0010LiteralB4_0011LiteralB4_0100LiteralB4_0101LiteralB4_0110LiteralB4_0111LiteralB4_1000LiteralB4_1001LiteralB4_1010LiteralB4_1011LiteralB4_1100LiteralB4_1101LiteralB4_1110LiteralB4_1111"

var _Op_map = map[Op]string{
	0:   _Op_name[0:7],
	1:   _Op_name[7:11],
	2:   _Op_name[11:16],
	3:   _Op_name[16:21],
	4:   _Op_name[21:28],
	5:   _Op_name[28:34],
	6:   _Op_name[34:40],
	7:   _Op_name[40:47],
	8:   _Op_name[47:58],
	9:   _Op_name[58:62],
	10:  _Op_name[62:68],
	11:  _Op_name[68:74],
	16:  _Op_name[74:84],
	17:  _Op_name[84:93],
	18:  _Op_name[93:105],
	19:  _Op_name[105:116],
	20:  _Op_name[116:122],
	21:  _Op_name[122:129],
	22:  _Op_name[129:134],
	23:  _Op_name[134:139],
	24:  _Op_name[139:143],
	25:  _Op_name[143:150],
	26:  _Op_name[150:156],
	27:  _Op_name[156:161],
	32:  _Op_name[161:164],
	33:  _Op_name[164:168],
	34:  _Op_name[168:174],
	35:  _Op_name[174:181],
	36:  _Op_name[181:185],
	37:  _Op_name[185:190],
	38:  _Op_name[190:193],
	39:  _Op_name[193:199],
	40:  _Op_name[199:202],
	41:  _Op_name[202:207],
	42:  _Op_name[207:211],
	48:  _Op_name[211:215],
	49:  _Op_name[215:219],
	64:  _Op_name[219:224],
	65:  _Op_name[224:230],
	66:  _Op_name[230:238],
	80:  _Op_name[238:246],
	81:  _Op_name[246:252],
	82:  _Op_name[252:263],
	83:  _Op_name[263:272],
	84:  _Op_name[272:287],
	85:  _Op_name[287:299],
	86:  _Op_name[299:309],
	87:  _Op_name[309:325],
	112: _Op_name[325:331],
	127: _Op_name[331:337],
	128: _Op_name[337:341],
	129: _Op_name[341:344],
	130: _Op_name[344:355],
	131: _Op_name[355:371],
	132: _Op_name[371:385],
	133: _Op_name[385:400],
	134: _Op_name[400:415],
	135: _Op_name[415:432],
	136: _Op_name[432:447],
	137: _Op_name[447:461],
	138: _Op_name[461:476],
	192: _Op_name[476:485],
	193: _Op_name[485:495],
	195: _Op_name[495:505],
	199: _Op_name[505:515],
	207: _Op_name[515:526],
	223: _Op_name[526:537],
	224: _Op_name[537:546],
	226: _Op_name[546:557],
	227: _Op_name[557:568],
	228: _Op_name[568:580],
	229: _Op_name[580:592],
	230: _Op_name[592:604],
	231: _Op_name[604:616],
	232: _Op_name[616:629],
	233: _Op_name[629:642],
	234: _Op_name[642:655],
	235: _Op_name[655:668],
	236: _Op_name[668:681],
	237: _Op_name[681:694],
	238: _Op_name[694:707],
	239: _Op_name[707:720],
	240: _Op_name[720:734],
	241: _Op_name[734:748],
	242: _Op_name[748:762],
	243: _Op_name[762:776],
	244: _Op_name[776:790],
	245: _Op_name[790:804],
	246: _Op_name[804:818],
	247: _Op_name[818:832],
	248: _Op_name[832:846],
	249: _Op_name[846:860],
	250: _Op_name[860:874],
	251: _Op_name[874:888],
	252: _Op_name[888:902],
	253: _Op_name[902:916],
	254: _Op_name[916:930],
	255: _Op_name[930:944],
}

func (i Op) String() string {
	if str, ok := _Op_map[i]; ok {
		return str
	}
	return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
}
