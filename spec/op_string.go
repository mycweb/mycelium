// Code generated by "stringer -type=Op"; DO NOT EDIT.

package spec

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Pass-1]
	_ = x[Equal-2]
	_ = x[Craft-3]
	_ = x[Uncraft-4]
	_ = x[Root-5]
	_ = x[Encode-6]
	_ = x[Decode-7]
	_ = x[TypeOf-8]
	_ = x[SizeOf-9]
	_ = x[MaxSize-10]
	_ = x[ZERO-16]
	_ = x[ONE-31]
	_ = x[ArrayEmpty-32]
	_ = x[ArrayUnit-33]
	_ = x[ProductEmpty-34]
	_ = x[ProductUnit-35]
	_ = x[Concat-36]
	_ = x[MakeSum-37]
	_ = x[Which-38]
	_ = x[Field-39]
	_ = x[Slot-40]
	_ = x[Section-41]
	_ = x[Gather-42]
	_ = x[Slice-43]
	_ = x[Let-48]
	_ = x[Lazy-49]
	_ = x[Lambda-50]
	_ = x[Fractal-51]
	_ = x[Eval-52]
	_ = x[Apply-53]
	_ = x[Mux-54]
	_ = x[Branch-55]
	_ = x[Try-56]
	_ = x[Panic-57]
	_ = x[Post-64]
	_ = x[Load-65]
	_ = x[Input-80]
	_ = x[Output-81]
	_ = x[Interact-82]
	_ = x[ListFrom-112]
	_ = x[ListTo-113]
	_ = x[AnyTypeFrom-114]
	_ = x[AnyTypeTo-115]
	_ = x[AnyTypeElemType-116]
	_ = x[AnyValueFrom-117]
	_ = x[AnyValueTo-118]
	_ = x[AnyValueElemType-119]
	_ = x[Self-128]
	_ = x[LiteralKind-129]
	_ = x[LiteralAnyType-130]
	_ = x[LiteralAnyValue-131]
	_ = x[LiteralB0-136]
	_ = x[LiteralB2-137]
	_ = x[LiteralB4-138]
	_ = x[LiteralB8-139]
	_ = x[LiteralB16-140]
	_ = x[LiteralB32-141]
	_ = x[LiteralB64-142]
	_ = x[LiteralB128-143]
	_ = x[LiteralB256-144]
	_ = x[Param0-192]
	_ = x[ParamN-255]
}

const _Op_name = "UnknownPassEqualCraftUncraftRootEncodeDecodeTypeOfSizeOfMaxSizeZEROONEArrayEmptyArrayUnitProductEmptyProductUnitConcatMakeSumWhichFieldSlotSectionGatherSliceLetLazyLambdaFractalEvalApplyMuxBranchTryPanicPostLoadInputOutputInteractListFromListToAnyTypeFromAnyTypeToAnyTypeElemTypeAnyValueFromAnyValueToAnyValueElemTypeSelfLiteralKindLiteralAnyTypeLiteralAnyValueLiteralB0LiteralB2LiteralB4LiteralB8LiteralB16LiteralB32LiteralB64LiteralB128LiteralB256Param0ParamN"

var _Op_map = map[Op]string{
	0:   _Op_name[0:7],
	1:   _Op_name[7:11],
	2:   _Op_name[11:16],
	3:   _Op_name[16:21],
	4:   _Op_name[21:28],
	5:   _Op_name[28:32],
	6:   _Op_name[32:38],
	7:   _Op_name[38:44],
	8:   _Op_name[44:50],
	9:   _Op_name[50:56],
	10:  _Op_name[56:63],
	16:  _Op_name[63:67],
	31:  _Op_name[67:70],
	32:  _Op_name[70:80],
	33:  _Op_name[80:89],
	34:  _Op_name[89:101],
	35:  _Op_name[101:112],
	36:  _Op_name[112:118],
	37:  _Op_name[118:125],
	38:  _Op_name[125:130],
	39:  _Op_name[130:135],
	40:  _Op_name[135:139],
	41:  _Op_name[139:146],
	42:  _Op_name[146:152],
	43:  _Op_name[152:157],
	48:  _Op_name[157:160],
	49:  _Op_name[160:164],
	50:  _Op_name[164:170],
	51:  _Op_name[170:177],
	52:  _Op_name[177:181],
	53:  _Op_name[181:186],
	54:  _Op_name[186:189],
	55:  _Op_name[189:195],
	56:  _Op_name[195:198],
	57:  _Op_name[198:203],
	64:  _Op_name[203:207],
	65:  _Op_name[207:211],
	80:  _Op_name[211:216],
	81:  _Op_name[216:222],
	82:  _Op_name[222:230],
	112: _Op_name[230:238],
	113: _Op_name[238:244],
	114: _Op_name[244:255],
	115: _Op_name[255:264],
	116: _Op_name[264:279],
	117: _Op_name[279:291],
	118: _Op_name[291:301],
	119: _Op_name[301:317],
	128: _Op_name[317:321],
	129: _Op_name[321:332],
	130: _Op_name[332:346],
	131: _Op_name[346:361],
	136: _Op_name[361:370],
	137: _Op_name[370:379],
	138: _Op_name[379:388],
	139: _Op_name[388:397],
	140: _Op_name[397:407],
	141: _Op_name[407:417],
	142: _Op_name[417:427],
	143: _Op_name[427:438],
	144: _Op_name[438:449],
	192: _Op_name[449:455],
	255: _Op_name[455:461],
}

func (i Op) String() string {
	if str, ok := _Op_map[i]; ok {
		return str
	}
	return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
}
