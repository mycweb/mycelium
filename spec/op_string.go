// Code generated by "stringer -type=Op"; DO NOT EDIT.

package spec

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Pass-1]
	_ = x[Equal-2]
	_ = x[Craft-3]
	_ = x[Uncraft-4]
	_ = x[TypeOf-5]
	_ = x[SizeOf-6]
	_ = x[MaxSize-7]
	_ = x[Fingerprint-8]
	_ = x[Root-9]
	_ = x[Encode-10]
	_ = x[Decode-11]
	_ = x[ZERO-16]
	_ = x[ONE-31]
	_ = x[ArrayEmpty-32]
	_ = x[ArrayUnit-33]
	_ = x[ProductEmpty-34]
	_ = x[ProductUnit-35]
	_ = x[Concat-36]
	_ = x[MakeSum-37]
	_ = x[Len-38]
	_ = x[Which-39]
	_ = x[Field-40]
	_ = x[Slot-41]
	_ = x[Section-42]
	_ = x[Let-48]
	_ = x[Lazy-49]
	_ = x[Lambda-50]
	_ = x[Fractal-51]
	_ = x[Eval-52]
	_ = x[Apply-53]
	_ = x[Mux-54]
	_ = x[Branch-55]
	_ = x[Try-56]
	_ = x[Panic-57]
	_ = x[Map-64]
	_ = x[Reduce-65]
	_ = x[Post-80]
	_ = x[Load-81]
	_ = x[Input-96]
	_ = x[Output-97]
	_ = x[Interact-98]
	_ = x[Gather-112]
	_ = x[Slice-113]
	_ = x[ListFrom-114]
	_ = x[ListTo-115]
	_ = x[AnyTypeFrom-116]
	_ = x[AnyTypeTo-117]
	_ = x[AnyTypeElemType-118]
	_ = x[AnyValueFrom-119]
	_ = x[AnyValueTo-120]
	_ = x[AnyValueElemType-121]
	_ = x[Self-128]
	_ = x[LiteralKind-129]
	_ = x[LiteralAnyType-130]
	_ = x[LiteralAnyValue-131]
	_ = x[LiteralB0-136]
	_ = x[LiteralB2-137]
	_ = x[LiteralB4-138]
	_ = x[LiteralB8-139]
	_ = x[LiteralB16-140]
	_ = x[LiteralB32-141]
	_ = x[LiteralB64-142]
	_ = x[LiteralB128-143]
	_ = x[LiteralB256-144]
	_ = x[Param0-192]
	_ = x[ParamN-255]
}

const _Op_name = "UnknownPassEqualCraftUncraftTypeOfSizeOfMaxSizeFingerprintRootEncodeDecodeZEROONEArrayEmptyArrayUnitProductEmptyProductUnitConcatMakeSumLenWhichFieldSlotSectionLetLazyLambdaFractalEvalApplyMuxBranchTryPanicMapReducePostLoadInputOutputInteractGatherSliceListFromListToAnyTypeFromAnyTypeToAnyTypeElemTypeAnyValueFromAnyValueToAnyValueElemTypeSelfLiteralKindLiteralAnyTypeLiteralAnyValueLiteralB0LiteralB2LiteralB4LiteralB8LiteralB16LiteralB32LiteralB64LiteralB128LiteralB256Param0ParamN"

var _Op_map = map[Op]string{
	0:   _Op_name[0:7],
	1:   _Op_name[7:11],
	2:   _Op_name[11:16],
	3:   _Op_name[16:21],
	4:   _Op_name[21:28],
	5:   _Op_name[28:34],
	6:   _Op_name[34:40],
	7:   _Op_name[40:47],
	8:   _Op_name[47:58],
	9:   _Op_name[58:62],
	10:  _Op_name[62:68],
	11:  _Op_name[68:74],
	16:  _Op_name[74:78],
	31:  _Op_name[78:81],
	32:  _Op_name[81:91],
	33:  _Op_name[91:100],
	34:  _Op_name[100:112],
	35:  _Op_name[112:123],
	36:  _Op_name[123:129],
	37:  _Op_name[129:136],
	38:  _Op_name[136:139],
	39:  _Op_name[139:144],
	40:  _Op_name[144:149],
	41:  _Op_name[149:153],
	42:  _Op_name[153:160],
	48:  _Op_name[160:163],
	49:  _Op_name[163:167],
	50:  _Op_name[167:173],
	51:  _Op_name[173:180],
	52:  _Op_name[180:184],
	53:  _Op_name[184:189],
	54:  _Op_name[189:192],
	55:  _Op_name[192:198],
	56:  _Op_name[198:201],
	57:  _Op_name[201:206],
	64:  _Op_name[206:209],
	65:  _Op_name[209:215],
	80:  _Op_name[215:219],
	81:  _Op_name[219:223],
	96:  _Op_name[223:228],
	97:  _Op_name[228:234],
	98:  _Op_name[234:242],
	112: _Op_name[242:248],
	113: _Op_name[248:253],
	114: _Op_name[253:261],
	115: _Op_name[261:267],
	116: _Op_name[267:278],
	117: _Op_name[278:287],
	118: _Op_name[287:302],
	119: _Op_name[302:314],
	120: _Op_name[314:324],
	121: _Op_name[324:340],
	128: _Op_name[340:344],
	129: _Op_name[344:355],
	130: _Op_name[355:369],
	131: _Op_name[369:384],
	136: _Op_name[384:393],
	137: _Op_name[393:402],
	138: _Op_name[402:411],
	139: _Op_name[411:420],
	140: _Op_name[420:430],
	141: _Op_name[430:440],
	142: _Op_name[440:450],
	143: _Op_name[450:461],
	144: _Op_name[461:472],
	192: _Op_name[472:478],
	255: _Op_name[478:484],
}

func (i Op) String() string {
	if str, ok := _Op_map[i]; ok {
		return str
	}
	return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
}
